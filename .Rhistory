model <- dummy_classifier(y, theDots$strategy, theDots$constant, theDots$random_state)
model$levels <- levels(model$y)
model
},
predict = function(modelFit, newdata, submodels = NULL) {
factor(predict_dummy_classifier(modelFit, newdata), levels = modelFit$levels)
},
prob = NULL,
predictors = function(x, ...) {
NULL
},
tags = c("Dummy Classifier"),
levels = NULL,
sort = function(x) x
)
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
dummy_classifier <- function(strategy = "proportional", constant = NULL, random_state = NULL, ...) {
if (!strategy %in% c("stratified", "most_frequent", "proportional", "uniform", "constant")) {
stop("Invalid strategy. Choose from 'stratified', 'most_frequent', 'proportional', 'uniform', or 'constant'.")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
function(X, y) {
model <- list()
model$strategy <- strategy
model$constant <- constant
model$y <- as.factor(y)
model$classes <- levels(y)
model$n_classes <- length(model$classes)
model$class_prior <- table(y) / length(y)
model$random_state <- random_state
if (strategy == "most_frequent") {
model$most_frequent <- levels(y)[which.max(table(y))]
}
return(model)
}
}
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
dummy_classifier <- function(y, strategy = "proportional", constant = NULL, random_state = NULL) {
if (!strategy %in% c("stratified", "most_frequent", "proportional", "uniform", "constant")) {
stop("Invalid strategy. Choose from 'stratified', 'most_frequent', 'proportional', 'uniform', or 'constant'.")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
function(X= data.frame(fake_pred = rep(0, length(y)))) {
model <- list()
model$strategy <- strategy
model$constant <- constant
model$y <- as.factor(y)
model$classes <- levels(y)
model$n_classes <- length(model$classes)
model$class_prior <- table(y) / length(y)
model$random_state <- random_state
if (strategy == "most_frequent") {
model$most_frequent <- levels(y)[which.max(table(y))]
}
return(model)
}
}
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
dummy_classifier <- function(y, strategy = "proportional", constant = NULL, random_state = NULL) {
if (!strategy %in% c("stratified", "most_frequent", "proportional", "uniform", "constant")) {
stop("Invalid strategy. Choose from 'stratified', 'most_frequent', 'proportional', 'uniform', or 'constant'.")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
function(y1 = y, X= data.frame(fake_pred = rep(0, length(y)))) {
model <- list()
model$strategy <- strategy
model$constant <- constant
model$y1 <- as.factor(y1)
model$classes <- levels(y1)
model$n_classes <- length(model$classes)
model$class_prior <- table(y1) / length(y1)
model$random_state <- random_state
if (strategy == "most_frequent") {
model$most_frequent <- levels(y1)[which.max(table(y1))]
}
return(model)
}
}
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
dummy_classifier <- function(y, strategy = "proportional", constant = NULL, random_state = NULL) {
if (!strategy %in% c("stratified", "most_frequent", "proportional", "uniform", "constant")) {
stop("Invalid strategy. Choose from 'stratified', 'most_frequent', 'proportional', 'uniform', or 'constant'.")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
function(X= data.frame(fake_pred = rep(0, length(y)))) {
model <- list()
model$strategy <- strategy
model$constant <- constant
model$y <- as.factor(y)
model$classes <- levels(y)
model$n_classes <- length(model$classes)
model$class_prior <- table(y) / length(y)
model$random_state <- random_state
if (strategy == "most_frequent") {
model$most_frequent <- levels(y)[which.max(table(y))]
}
return(model)
}
}
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
dummyClassifier <- list(
label = "dummyClassifier",
library = NULL,
type = "Classification",
parameters = data.frame(parameter = "parameter",
class = "character",
label = "parameter"),
grid = function(x, y, len = NULL, search = "grid") {
data.frame(parameter = "none")
},
loop = NULL,
fit = function(x, y, wts, param, lev, last, classProbs, ...) {
theDots <- list(...)
if (!any(names(theDots) == "strategy")){
theDots$strategy <- "proportional"
}
if (!any(names(theDots) == "constant")){
theDots$constant <- NULL
}
if (!any(names(theDots) == "random_state")){
theDots$random_state <- NULL
}
model <- dummy_classifier(y, theDots$strategy, theDots$constant, theDots$random_state)()
model$levels <- levels(model$y)
model
},
predict = function(modelFit, newdata, submodels = NULL) {
factor(predict_dummy_classifier(modelFit, newdata), levels = modelFit$levels)
},
prob = NULL,
predictors = function(x, ...) {
NULL
},
tags = c("Dummy Classifier"),
levels = NULL,
sort = function(x) x
)
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
# Make predictions using the trained dummy classifier
classifier_predictions_caret <- predict(classifier_model_caret, test_data)
# Evaluate the performance of the dummy classifier
classifier_confusion_matrix <- caret::confusionMatrix(classifier_predictions_caret, test_data$Species)
print(classifier_confusion_matrix)
set.seed(6)
M <- 30
m <- 10
cell_train <- data.frame(State = c(rep("normal", M),
rep("diseased", m)))
cell_train$State <- sample(cell_train$State, (M+m), replace=F)
cell_train$State <- as.factor(cell_train$State)
dummy_classifier(cell_train$State, strategy = "uniform", random_state = 2024)
dummy_classifier(cell_train$State, strategy = "uniform", random_state = 2024)()
remove.packages("basemodels")
devtools::load_all()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
remove.packages("basemodels")
devtools::load_all()
devtools::install()
library(caret)
library(dummypredictor)
# Split the data into training and testing sets
set.seed(2023)
index <- sample(1:nrow(iris), nrow(iris) * 0.8)
train_data <- iris[index,]
test_data <- iris[-index,]
ctrl1 <- trainControl(method = "none")
classifier_model_caret <- train(Species ~ ., data = train_data,
method = dummyClassifier,
strategy = "stratified",
trControl = ctrl1)
# Make predictions using the trained dummy classifier
classifier_predictions_caret <- predict(classifier_model_caret, test_data)
# Evaluate the performance of the dummy classifier
classifier_confusion_matrix <- caret::confusionMatrix(classifier_predictions_caret, test_data$Species)
print(classifier_confusion_matrix)
usethis::use_r("dummy_classifier")
#' dummy classifier to a categorical variable
#'
#' @param strategy a strategy from "constant", "most_frequent", "proportional", "uniform", or "stratified".
#' @param constant a constant value for the constant strategy.
#' @param random_state a random seed.
#'
#' @return a list
#' @examples
#' dummy_classifier(iris$Species, strategy = "proportional", random_state = 2024)
#'
dummy_classifier <- function(y, strategy = "proportional", constant = NULL, random_state = NULL, ...) {
if (!strategy %in% c("stratified", "most_frequent", "proportional", "uniform", "constant")) {
stop("Invalid strategy. Choose from 'stratified', 'most_frequent', 'proportional', 'uniform', or 'constant'.")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
model <- list()
model$strategy <- strategy
model$constant <- constant
model$y <- as.factor(y)
model$classes <- levels(y)
model$n_classes <- length(model$classes)
model$class_prior <- table(y) / length(y)
model$random_state <- random_state
if (strategy == "most_frequent") {
model$most_frequent <- levels(y)[which.max(table(y))]
}
return(model)
}
dummy_classifier(iris$Species, strategy = "proportional", random_state = 2024)
usethis::use_r("dummy_regressor")
head(iris)
remove.packages("basemodels")
devtools::load_all()
devtools::install()
devtools::check()
devtools::check()
set.seed(2023)
index <- sample(1:nrow(iris), nrow(iris)*.8)
train_data <- iris[index,]
test_data <- iris[-index,]
#' @export
#'
#' @examples
#' # Split the data into training and testing sets
#' set.seed(2023)
#' index <- sample(1:nrow(iris), nrow(iris) * 0.8)
#' train_data <- iris[index,]
#' test_data <- iris[-index,]
#' model <- dummy_regressor(train_data$Sepal.Length, strategy = "median")
#' model
dummy_regressor <- function(y, strategy = "mean", quantile = NULL, constant = NULL) {
if (!strategy %in% c("mean", "median", "quantile", "constant")) {
stop("Invalid strategy. Choose from 'mean', 'median', 'quantile', or 'constant'.")
}
if (strategy == "quantile" & is.null(quantile)) {
stop("For quantile strategy, you have to specify the desired quantile in the range [0, 1].")
}
if (strategy == "constant" & is.null(constant)) {
stop("For constant strategy, you need to provide a constant value.")
}
model <- list()
model$strategy <- strategy
model$quantile <- quantile
model$constant <- constant
model$y <- y
return(model)
}
reg_model <- dummy_regressor(train_data$Sepal.Length, strategy = "median")
reg_model
#' set.seed(2023)
#' index <- sample(1:nrow(iris), nrow(iris) * 0.8)
#' train_data <- iris[index,]
#' test_data <- iris[-index,]
#'
#' # Make predictions using the trained dummy classifier
#' reg_model <- dummy_regressor(train_data$Sepal.Length, strategy = "median")
#' y.hat <- predict_dummy_regressor(reg_model, test_data)
#' # Find mean squared error
#' mean((test_data$Sepal.Length-y.hat)^2)
predict_dummy_regressor <- function(object, X) {
n_samples <- nrow(X)
strategy <- object$strategy
percentile <- object$quantile
constant <- object$constant
y <- object$y
if (!(is.numeric(y)|is.integer(y))) stop("The response variable is not numerical.")
if (strategy == "mean") {
y.hat <- rep(mean(y, na.rm=T), n_samples)
} else if (strategy == c("median")) {
y.hat <- rep(stats::median(y, na.rm=T), n_samples)
} else if (strategy == "quantile") {
if (percentile < 0 | percentile > 1){
stop("quantile must be a value in the range [0, 1].")
}
y.hat <- rep(unname(stats::quantile(y, percentile, na.rm=T)), n_samples)
} else if (strategy == "constant") {
y.hat <- rep(constant, n_samples)
} else {
stop("Invalid strategy specified.")
}
return(y.hat)
}
y.hat <- predict_dummy_regressor(reg_model, test_data)
y.hat
mean((test_data$Sepal.Length-y.hat)^2)
devtools::check()
devtools::load_all()
devtools::document()
devtools::install()
devtools::check()
devtools::check()
devtools::load_all()
devtools::document()
devtools::install()
devtools::check()
remove.packages("basemodels")
getwd()
usethis::use_release_issue()
gh_token_hp()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_release_issue()
rlang::last_trace()
usethis::use_git_config(user.name = "Ying-Ju", user.email = "ychen4@udayton.edu")
?credentials::set_github_pat
credentials::set_github_pat("Lagrange1969!")
credentials::set_github_pat("Lagrange1969!")
usethis::edit_r_environ()
getwd()
usethis::git_sitrep()
usethis::use_release_issue()
usethis::gh_token_help()
usethis::use_release_issue()
usethis::use_cran_comments()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(remote = T)
devtools::check(remote = T)
devtools::check()
attachment::att_amend_desc()
install.packages('attachment', repos = 'https://thinkr-open.r-universe.dev')
attachment::att_amend_desc()
devtools::test()
devtools::test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
getwd()
devtools::run_examples()
devtools::test()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
urlchecker::url_check()
devtools::check_win_devel()
rhub::check_for_cran()
install.packages("rhub")
install.packages("rhub")
rhub::check_for_cran()
devtools::build_manual()
getwd()
usethis::use_version('major')
usethis::use_version('major')
usethis::use_version('major')
usethis::use_version('major')
devtools::submit_cran()
pack <- "basemodels"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::load_all()
devtools:install()
devtools::install()
devtools::check()
devtools::check()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load("tidyverse")
# Import 5 years of data
path <- "G:/Shared drives/Tessa and Tatjana research/R_analysis/TanjaWork_Nov2022/Nov2022_RaceOnly"
pop <- read_csv(paste0(path, "/popRace.csv"), col_names = TRUE)
pop <- pop %>% rename(AgeGroup = `Age Group`)
pop$AgeGroup <- gsub(" years", "", pop$AgeGroup)
ageconverter <- function(x){
if (x == "85+") return("55+")
temp <- as.numeric(unlist(strsplit(x, "-")))
if (temp[2] <= 24) return("15-24")
if (temp[2] > 25 & temp[2] <= 54) return("25-54")
return("55+")
}
pop <- pop %>% filter(AgeGroup != "10-14")
pop$AgeGroup <- sapply(pop$AgeGroup, ageconverter)
pop_age <- pop %>%
group_by(State, Gender, Race, Year, AgeGroup) %>%
summarise(Population = sum(Population))
count(pop_age, AgeGroup)
# read the data for Age 15 population
Age15 <- read_csv("Pop_Age15_allyears.csv")
Age15 <- Age15 %>% rename("Year" = "Yearly July 1st Estimates")
Age15 <- Age15 %>%
select(State, Gender, Race, Year, Population) %>%
filter(Year != 2015)
# check orders of categories are the same in two data frames.
temp <- rep(NA, 1080)
for (i in 1:1080){
temp[i] <- ifelse(all(pop_age[(i*3-2),1:4]==Age15[i, 1:4]), 1, 0)
}
sum(temp)
# remove Age 15 population
for (i in 1:1080){
pop_age$Population[(i*3-2)] <- pop_age$Population[(i*3-2)] - Age15$Population[i]
}
pop_age$AgeGroup <- recode(pop_age$AgeGroup,
"15-24" = "16-24")
write_csv(pop_age, "pop27_3AgeGroup.csv")
# read the data for Age 15 population
Age15 <- read_csv("../Population/Pop_Age15_allyears.csv")
glimpse(Age15)
?case_when
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load("tidyverse")
source(Functions.R)
path <- "G:/Shared drives/Tessa and Tatjana research/R_analysis/TanjaWork_Nov2022/Nov2022_RaceOnly"
suic <- read_csv(paste0(path, "/Miljkovic_491_nvdrs_2020_suicide.csv"))
homoth <- read_csv(paste0(path, "/Miljkovic_491_nvdrs_2020.csv"))
source("Functions.R")
suic <- age_cleaning(suic)
table(suic$AgeGroup)
homoth <- age_cleaning(homoth)
table(homoth$AgeGroup)
sort(c("Maryland","North Carolina", "New Mexico", "Kentucky",
"Massachusetts", "New Jersey", "Oregon", "Oklahoma",
"South Carolina", "Virginia", "Wisconsin", "Georgia",
"Utah", "Rhode Island","Colorado", "Alaska", "Ohio",
"Michigan", "Arizona", "Connecticut", "Indiana", "Iowa",
"Kansas", "Maine", "Minnesota", "New Hampshire", "Vermont"))
install.packages("reticulate")
library(reticulate)
install_miniconda()
remotes::install_github("hafen/rminiconda")
rminiconda::install_miniconda(name='Tessa Chen')
vignette(package="basemodels")
vignette(package="basemodels")
vignette("intro_to_basemodels", package="basemodels")
citation("basemodels")
usethis::use_citation()
citation(data.table)
citation("lm")
citation("stats")
citation("car")
meta <- packageDescription("basemodels")
names(meta)
meta$Version
meta$Authors@R`
meta$`Authors@R`
library(basemodels)
citation("basemodels")
library(basemodels)
citation(basemodels)
citation("basemodels")
library(basemodels)
citation("basemodels")
detach("package:basemodels", unload = TRUE)
library(basemodels)
citation("basemodels")
library(basemodels)
citation("basemodels")
library(basemodels)
citation("basemodels")
detach("package:basemodels", unload = TRUE)
library(basemodels)
citation("basemodels")
detach("package:basemodels", unload = TRUE)
library(basemodels)
citation("basemodels")
library(basemodels)
citation("basemodels")
library(basemodels)
citation("basemodels")
detach("package:basemodels", unload = TRUE)
library(basemodels)
citation("basemodels")
